* ABOR and telnet command support.

* NIO / async IO

* File replication
	Build API for replicating+streaming files across slaves
	Replicate .sfv files over all slaves

* XML BASED CONFIGURATION

* More fine grained file-permissions?
	Current permission style:
		- Can delete if is file owner or isAdmin().
		- Can always create anywhere.

* PASV - passive transfer mode

* recheck content on slaves to automatically add new files/remove
  deleted files.
	Issue:
		Latency/load, reloading the site contents from disk
		is time consuming and loads the disks. It possibly
		overloads the slave too.
	Possible Solution:
		- Recursively check entire site and call sleep() often.
		- Check one directory at a time and sync directly to the
		  LinkedRemoteFile tree.
		- Restart slave and make sure slave is unmerge()'d before.

* Automatically delete/move files when diskspace is getting low.

* redundant masters

* Queued deletes/renames:
	Issues:
		Remove files from LinkedRemoteFile tree?
		Or implememnt isDeleted() or exists()?
		Make lookupFile() throw NoSuchFileExistsException on deleted files?
	needed fields:
		deletes:	path
		renames:	from, to
	Solution:
		deletes:	LinkedRemoteFile has a field called isDeleted