<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<project name="DRFTPD Installer Project Helper" basedir=".">

	<property name="build.debug" value="true" />
	<property name="build.javac" value="1.5" />
	<property name="build.optimize" value="false" />
	<property name="build.verbose" value="true" />

	<path id="classpath">
		<fileset dir="lib" includes="*.jar" />
	</path>

	<!-- declare third party tasks -->
	<typedef resource="org/java/plugin/tools/ant/jpf-tasks.properties">
		<classpath refid="classpath" />
	</typedef>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" />
	<!-- declare custom tasks -->
	<taskdef resource="org/drftpd/tools/ant/drftpdtasks.properties" />
	<!-- set plugin build timestamp -->
	<tstamp>
		<format property="build.plugins.start" pattern="yyyy.MM.dd HH:mm:ss.SSS" />
	</tstamp>

	<!-- define common macros for build and clean targets -->
	<macrodef name="buildplugin">
		<sequential>
			<jpf-info manifest="${plugin.base}/plugin.xml"
						propertyid="plugin.id"
						propertyversion="plugin.version" />
			<property name="plugin.home" value="${installdir}/${plugin.family}/${plugin.id}" />
			<if>
				<equals arg1="${devmode}" arg2="true" />
				<then>
					<echo>Building ${plugin.id} plug-in to directory ${plugin.home}</echo>
				</then>
				<else>
					<echo>Building ${plugin.id} plug-in to file ${installdir}/${plugin.family}/${plugin.id}-${plugin.version}.zip</echo>
				</else>
			</if>
			<resourcetask
				basedir="${installdir}"
				resourcedir="${plugin.base}/resources" />
			<themetask
				basedir="${installdir}"
				plugindir="${plugin.base}/src" />
			<jpf-path
				basedir="${basedir}"
				pathid="plugin.classpath"
				pluginid="${plugin.id}"
				includes="src/*/plugin.xml,src/plugins/*/plugin.xml"
				verbose="${build.verbose}" />
			<property name="build.dir" value="${plugin.base}/build" />
			<mkdir dir="${build.dir}" />
			<copy file="${plugin.base}/plugin.xml" todir="${build.dir}" />
			<replaceregexp file="${build.dir}/plugin.xml"
				match="(library\x20id.*?)(\.\.\/){3,}(lib\/.*\.jar)"
				replace="\1..\/..\/\3"
				byline="true" />
			<if>
				<equals arg1="${devmode}" arg2="true" />
				<then>
					<replaceregexp file="${build.dir}/plugin.xml"
						match="build\/classes\/"
						replace="classes\/"
						byline="true" />
				</then>
				<else>
					<replaceregexp file="${build.dir}/plugin.xml"
						match="build\/classes\/"
						replace="${plugin.id}-${plugin.version}\.jar"
						byline="true" />
				</else>
			</if>
			<property name="compile.dest" value="${build.dir}/classes" />
			<mkdir dir="${compile.dest}" />
			<javac destdir="${compile.dest}"
				srcdir="${plugin.base}/src"
				classpathref="plugin.classpath"
				excludes="${compile.excludes}"
				source="${build.javac}"
				target="${build.javac}"
				debug="${build.debug}"
				optimize="${build.optimize}">
			</javac>
			<copy todir="${compile.dest}">
				<fileset dir="${plugin.base}/src">
					<include name="**/*.properties" />
					<exclude name="**/*.*.properties" />
				</fileset>
			</copy>
			<libcopytask />
			<if>
				<equals arg1="${devmode}" arg2="true" />
				<then>
					<mkdir dir="${plugin.home}/classes" />
					<copy todir="${plugin.home}/classes">
						<fileset dir="${build.dir}/classes">
							<include name="**/*.class" />
							<include name="**/*.properties" />
							<exclude name="**/*.*.properties" />
						</fileset>
					</copy>
					<copy file="${build.dir}/plugin.xml" todir="${plugin.home}" />
				</then>
				<else>
					<jar destfile="${build.dir}/${plugin.id}-${plugin.version}.jar">
						<manifest>
							<attribute name="Specification-Title" value="DrFTPd - ${plugin.id}" />
							<attribute name="Specification-Version" value="${plugin.version}" />
							<attribute name="Specification-Vendor" value="http://www.drftpd.org" />
							<attribute name="Implementation-Title" value="${plugin.id}" />
							<attribute name="Implementation-Version" value="${plugin.version}" />
							<attribute name="Implementation-Vendor" value="http://www.drftpd.org" />
						</manifest>
						<fileset dir="${build.dir}/classes">
							<include name="**/*.class" />
							<include name="**/*.properties" />
							<exclude name="**/*.*.properties" />
						</fileset>
					</jar>
					<mkdir dir="${installdir}/${plugin.family}" />
					<loggingziptask destfile="${installdir}/${plugin.family}/${plugin.id}-${plugin.version}.zip"
						basedir="${build.dir}"
						includes="*.jar,plugin.xml" />
				</else>
			</if>
		</sequential>
	</macrodef>
	<macrodef name="cleanplugin">
		<sequential>
			<jpf-info manifest="${plugin.base}/plugin.xml"
				propertyid="plugin.id"
				propertyversion="plugin.version" />
			<property name="plugin.home" value="${installdir}/${plugin.family}/${plugin.id}" />
			<echo>Cleaning ${plugin.id} plug-in</echo>

			<!-- clean any existing build files -->
			<delete dir="${plugin.base}/build" />

			<!-- to be safe clean out any existing installed copy also -->
			<delete dir="${plugin.home}" />
			<delete file="${plugin.home}-${plugin.version}.zip" />
		</sequential>
	</macrodef>
</project>